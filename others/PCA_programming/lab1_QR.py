# -*- coding: utf-8 -*-
# !usr/bin/env python3 
"""
-------------------------------------------------
   File Name:     lab1_QR
   Description :
   Author :       Yuwei Liu
   date：          2018/5/21
-------------------------------------------------
   Change Activity:
                   2018/5/21:
-------------------------------------------------
"""

import numpy as np
from scipy.linalg import hilbert
import math

A = np.array([[10, 7, 8, 7],
              [7, 5, 6, 5],
              [8, 6, 10, 9],
              [7, 5, 9, 10]])
B = np.array([[2, 3, 4, 5, 6],
              [4, 4, 5, 6, 7],
              [0, 3, 6, 7, 8],
              [0, 0, 2, 8, 9],
              [0, 0, 0, 1, 0]])
H_6 = hilbert(6)
""" 利用函数生成这个Hilbert matrix
print(H_6)
[[1.         0.5        0.33333333 0.25       0.2        0.16666667]
 [0.5        0.33333333 0.25       0.2        0.16666667 0.14285714]
 [0.33333333 0.25       0.2        0.16666667 0.14285714 0.125     ]
 [0.25       0.2        0.16666667 0.14285714 0.125      0.11111111]
 [0.2        0.16666667 0.14285714 0.125      0.11111111 0.1       ]
 [0.16666667 0.14285714 0.125      0.11111111 0.1        0.09090909]]
"""
EPSILON = 1e-10


def check_stop_iter(mat):
    """
    判断一下是否达到了停止迭代的条件
    :param mat: A_{k}
    :return:  True 为达到停止迭代的条件
    """
    r, c = mat.shape
    for j in range(c):
        for i in range(j+1, r):
            if abs(mat[i][j]) >= EPSILON:
                return False
    return True


def qr_decomposition(mat):
    pass


def qr_algorithm(mat):
    """
    Using QR decomposition iteration to find eigenvalue of `mat`.
    通过QR迭代法，将矩阵mat变为一个相似于mat的上三角矩阵
    其对角线的元素就是mat的特征值
    :param mat:
    :return:
    """
    A_k = mat
    stop = False
    V = np.identity(mat.shape[0])
    # print("----------- start iteration --------------")
    while not stop:
        Q, R = np.linalg.qr(A_k)
        V = np.dot(V, Q)
        A_k = np.dot(R, Q)
        stop = check_stop_iter(A_k)
    # print("----------- stop iteration ---------------")
    eigenvalue = [A_k[i][i] for i in range(min(A_k.shape))]
    return A_k, eigenvalue, V


def cal_condition_num(mat):
    """
    通过计算矩阵的奇异值来求解矩阵的2-norm condition number
    :param mat:
    :return:
    """
    _, singular_value, _ = qr_algorithm(np.dot(np.transpose(mat), mat))
    return math.sqrt(singular_value[0]/singular_value[-1])


def main(mat):
    # a) 通过QR法迭代使矩阵收敛到上三角矩阵，并且得到主对角线上的特征值
    A_k, eigenvalue_qr, _ = qr_algorithm(mat)
    print("迭代后生成的矩阵A_k为:\n%s" % A_k)
    print("通过迭代法找到的矩阵特征值为:\n%s" % " ".join([str(v) for v in sorted(eigenvalue_qr)]))
    eigenvalue, eigenvector = np.linalg.eig(mat)
    print("通过函数直接求得的矩阵特征值为:\n", " ".join([str(v) for v in sorted(eigenvalue)]))

    # b) 计算矩阵的2-norm condition number
    print("通过函数直接计算得到的矩阵的2-norm condition number 为:      ", np.linalg.cond(mat))
    cond = cal_condition_num(mat)
    print("迭代法计算奇异值, 再计算矩阵的2-norm condition number结果为: ", cond)
    print()


if __name__ == '__main__':
    main(A)
    """
    迭代后生成的矩阵A_k为:
    [[ 3.02886853e+01  7.07685610e-15 -1.95543613e-15  7.71574689e-16]
     [ 2.39537050e-15  3.85805746e+00  2.62581967e-11 -9.05850402e-16]
     [ 1.91688748e-26  2.62560426e-11  8.43107150e-01 -1.78096048e-15]
     [ 3.04098958e-61 -2.30070007e-46  1.07862752e-34  1.01500484e-02]]
    通过迭代法找到的矩阵特征值为 :
    0.010150048397891057 0.8431071498550311 3.8580574559449525 30.288685345802122
    通过函数直接求得的矩阵特征值为:
     0.010150048397889211 0.8431071498550319 3.8580574559449508 30.2886853458021
     """

    main(B)
    """
    迭代后生成的矩阵A_k为:
    [[ 1.31723514e+01 -1.12224333e+01  1.38327301e+00  1.22876570e+01 2.18439170e+00]
     [-1.21146443e-12  6.55187835e+00 -1.45097272e+00 -5.46614904e+00 -4.24112904e-01]
     [ 0.00000000e+00 -1.99331255e-25  1.59565457e+00 -3.44534395e-01 2.00394783e+00]
     [ 0.00000000e+00  0.00000000e+00  6.92252792e-11 -9.29096278e-01 -2.94914968e-01]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.08214501e-16 -3.90788045e-01]]
    通过迭代法找到的矩阵特征值为 :
    -0.929096277761744 -0.39078804541648804 1.5956545731593825 6.5518783519177175 13.17235139810113
    通过函数直接求得的矩阵特征值为:
     -0.9290962777522975 -0.3907880454164876 1.595654573149939 6.55187835191566 13.172351398103185
    """

    main(H_6)
    """
    迭代后生成的矩阵A_k为:
    [[ 1.61889986e+00  2.14376244e-11 -1.24867884e-16 -8.28626258e-17 2.61248093e-17 -1.35962449e-17]
     [ 2.14375843e-11  2.42360871e-01  1.80485487e-16 -3.45411876e-20 1.27670160e-17  1.52848806e-17]
     [ 1.26823982e-26  1.94026745e-16  1.63215213e-02 -9.38477237e-18 4.59625940e-18  6.03968200e-18]
     [-4.21062700e-45 -7.18337808e-35 -9.12570985e-21  6.15748354e-04 6.52812883e-18  3.06867062e-18]
     [-4.28720535e-67 -7.70464997e-57 -1.16509861e-42  1.26538526e-25 1.25707571e-05 -3.58686766e-20]
     [-4.39395899e-94 -8.12775617e-84 -1.34875248e-69  1.82106680e-52 3.02700446e-32  1.08279948e-07]]
    通过迭代法找到的矩阵特征值为 :
    1.0827994844393853e-07 1.2570757122641285e-05 0.0006157483541826463 0.01632152131987584 0.2423608705752094 1.6188998589243386
    通过函数直接求得的矩阵特征值为:
     1.0827994844739511e-07 1.2570757122654954e-05 0.0006157483541826439 0.016321521319875833 0.24236087057520964 1.6188998589243382
     """
